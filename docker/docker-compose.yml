version: '3.7'
services:
  database:
      image: postgres:latest
      container_name: postgres
      ports:
        - "5432:5432"
      environment:
        POSTGRES_USER: "toy"
        POSTGRES_PASSWORD: "toy"
        POSTGRES_DB: "toy_dev"
      volumes:
        - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
        - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql
      networks:
        backend:
          aliases:
            - "database"
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 10s
        timeout: 5s
        retries: 5
  configserver:
    image: toy/config-server:0.0.1-SNAPSHOT
    container_name: toy-config-server
    ports:
      - "8071:8071"
#    environment:
#      ENCRYPT_KEY: "9c96cef72ef39d8129638f1a84d748cfec4891ad75d115baf102d3384603a186"
    networks:
      backend:
        aliases:
          - "configserver"
  eurekaserver:
    image: toy/eureka-server:0.0.1-SNAPSHOT
    container_name: toy-eureka-server
    ports:
      - "8070:8070"
    depends_on:
      - database
      - configserver
    networks:
      backend:
        aliases:
          - "eurekaserver"
    restart: on-failure
  licensingservice:
    image: toy/licensing-service:0.0.2-SNAPSHOT
    container_name: toy-licensing-service
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT: "8071"
      DATABASESERVER_PORT: "5432"
#      ENCRYPT_KEY: "9c96cef72ef39d8129638f1a84d748cfec4891ad75d115baf102d3384603a186"
    depends_on:
      - database
      - configserver
    ports:
      - "8080:8080"
    networks:
      - backend
    restart: on-failure
#  organizationservice:
#    image: toy/organization-service:0.0.1-SNAPSHOT
#    environment:
#      PROFILE: "dev"
#      CONFIGSERVER_URI: "http://configserver:8071"
#      CONFIGSERVER_PORT:   "8071"
#      DATABASESERVER_PORT: "5432"
#      ENCRYPT_KEY:       "IMSYMMETRIC"
#    ports:
#      - "8081:8081"
#    networks:
#      - backend

networks:
  backend:
    driver: bridge

